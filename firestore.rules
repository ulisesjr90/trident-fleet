rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isSignedIn() && request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isRep() {
      return hasRole('rep');
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isTeamMember(customerData) {
      return request.auth.uid in customerData.additionalOwnerIds || 
             request.auth.uid == customerData.primaryOwnerId;
    }

    function isCustomerTeamMember(customerId) {
      let customer = get(/databases/$(database)/documents/customers/$(customerId)).data;
      return isTeamMember(customer);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Customers collection
    match /customers/{customerId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.primaryOwnerId) ||
        request.auth.uid in resource.data.additionalOwnerIds
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && isOwner(resource.data.primaryOwnerId);
      
      allow delete: if isAuthenticated() && isOwner(resource.data.primaryOwnerId);
    }
    
    // Allow complex queries for customers collection
    match /customers/{document=**} {
      allow list: if isSignedIn() && (
        isAdmin() ||
        (request.query.limit <= 1000 &&
         (
           (request.query.filters.size() == 1 && 
            request.query.filters[0].op == '==' && 
            request.query.filters[0].field == 'primaryOwnerId' &&
            request.query.filters[0].value == request.auth.uid) ||
           (request.query.filters.size() == 1 && 
            request.query.filters[0].op == 'array-contains' && 
            request.query.filters[0].field == 'additionalOwnerIds' &&
            request.query.filters[0].value == request.auth.uid)
         ))
      );
    }
    
    // Customer History rules
    match /customerHistory/{historyId} {
      allow read: if isAuthenticated() && isCustomerTeamMember(resource.data.customerId);
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.userId) &&
        (
          request.auth.uid in get(/databases/$(database)/documents/customers/$(request.resource.data.customerId)).data.additionalOwnerIds ||
          request.auth.uid == get(/databases/$(database)/documents/customers/$(request.resource.data.customerId)).data.primaryOwnerId
        )
      );
      allow update, delete: if false; // History items cannot be modified or deleted
    }

    // Vehicles collection
    match /vehicles/{vehicleId} {
      // Both admins and reps can read vehicles
      allow read: if isAuthenticated();
      
      // Both admins and reps can create vehicles
      allow create: if isAuthenticated();
      
      // Admins can update any vehicle, reps can only update specific fields
      allow update: if isAdmin() || (
        isRep() && (
          // Reps can only update these fields
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'mileage', 'lastServiceDate', 'updatedAt'])
        )
      );
      
      // Only admins can delete vehicles
      allow delete: if isAdmin();
      
      // Allow complex queries
      allow list: if isAuthenticated() && (
        request.query.limit <= 1000
      );
    }
    
    // Vehicle Events collection
    match /vehicle_events/{eventId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && 
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.eventDateTime is timestamp &&
                   request.resource.data.createdAt is timestamp;
      allow update: if isAdmin() || 
                   (isOwner(resource.data.userId) && 
                     request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['notes', 'updatedAt']));
      allow delete: if isAdmin();
    }
    
    // Vehicle Assignments collection
    match /vehicle_assignments/{assignmentId} {
      allow read: if isRep() || isAdmin();
      allow create, update: if isRep() && (
        request.resource.data.ownerId == request.auth.uid
      ) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // User preferences collection
    match /user_preferences/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
    
    // UI preferences collection
    match /ui_preferences/{userId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() || (isSignedIn() && isOwner(resource.data.userId) && 
                     request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['expiryTime', 'lastActivity', 'isActive', 'expiredAt', 'terminatedAt', 'deviceInfo']));
      allow delete: if isAdmin();
    }
    
    // User Sessions collection
    match /user_sessions/{sessionId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.userId == request.auth.uid || 
        request.resource.data.userId == request.auth.uid
      );
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // Invitations collection
    match /invitations/{invitationId} {
      allow read: if true;
      allow update: if isSignedIn() && (
        isAdmin() || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['used', 'usedAt', 'usedBy']) && 
         request.resource.data.usedBy == request.auth.uid)
      );
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Invites collection (older format)
    match /invites/{inviteId} {
      allow read: if true;
      allow update: if isSignedIn() && (
        isAdmin() || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'usedAt', 'usedBy']) && 
         request.resource.data.usedBy == request.auth.uid && 
         request.resource.data.status == 'completed')
      );
      allow create: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // File uploads collections
    match /clients_files/{fileId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
    match /uploads_files/{fileId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
    // Maintenance records collection
    match /maintenance_records/{recordId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Tasks collections
    match /alerts_tasks/{taskId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }
    
    match /documents_tasks/{taskId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }
    
    match /tasks/{taskId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }
    
    // Damage reports collection
    match /damage_reports/{reportId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
    }
    
    // Clients collection
    match /clients/{clientId} {
      allow read: if isSignedIn();
      allow list: if isRep() && (
        (request.query.limit <= 1000 && 'primaryOwnerId' in request.query.filters) ||
        (request.query.limit <= 1000 && 'additionalOwnerIds' in request.query.filters) ||
        (request.query.limit <= 1000 && 'additionalOwners' in request.query.filters)
      );
      allow create: if isSignedIn();
      allow update: if isAdmin() || isRep() && (
        resource.data.primaryOwnerId == request.auth.uid ||
        resource.data.additionalOwnerIds is list && resource.data.additionalOwnerIds.hasAny([request.auth.uid])
      );
      allow delete: if isAdmin() || isRep() && (
        resource.data.primaryOwnerId == request.auth.uid
      );
      
      // Client documents subcollection
      match /documents/{documentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isAdmin() || isRep() && (
          get(/databases/$(database)/documents/clients/$(clientId)).data.primaryOwnerId == request.auth.uid
        );
        allow delete: if isAdmin();
      }
    }
    
    // Provide blanket permissions for admins across all collections
    match /{collection}/{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
} 